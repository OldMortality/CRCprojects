/*

 Disclaimer of Warranties. The author disclaims to the fullest extent authorized by law any and all other warranties, 
 whether express or implied, including, without limitation, any implied warranties of title, non-infringement, quiet enjoyment, 
 integration, merchantability or fitness for a particular purpose. Without limitation of the foregoing, the author expressly 
 does not warrant that:
 (a) the software will meet your requirements or expectations;
 (b) the software or the software content] will be free of bugs, errors, viruses or other defects;
 (c) any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
 (d) the software will be compatible with third party software;
 (e) any errors in the software will be corrected.

 Under no circumstances shall the author be liable to any user for direct, indirect, incidental, consequential, 
 special, or exemplary damages, arising from the software, or user's use or misuse of the software or any other services 
 provided by the author. 

 Such limitation of liability shall apply whether the damages arise from the use or
 misuse of the software or any other services supplied by the author
 (including such damages incurred by third parties), or errors of the software.

 The software is supplied “as is” and all use is at your own risk.



 Author: Michel de Lange

 Dunedin, January 2014.

 */
package ac.otago.infoscience.eCRC.client;

import java.util.logging.Level;
import java.util.logging.Logger;

import ac.otago.infoscience.eCRC.shared.CancerHistory;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.shared.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.VerticalPanel;

public class Form1 implements EntryPoint, ClickHandler {

	int dummy = -1;
	// turn the database on or off. You must set requestparameter db=false to
	// turn off the database.
	boolean databaseOn = true;

	// turn preload of existing data from the database on or of. You must set
	// requestParameter preload=false to turn it off.

	boolean preloadOn = true;

	EntryPanel entryPanel;
	// create all the detail panels

	FamilyPanel familyPanel;

	Button submitButton = new Button("calculate risk and Save");

	HorizontalPanel hor = new HorizontalPanel();

	DetailsPanel[] details = new DetailsPanel[Util.NUMBER_OF_RELATIONSHIPS];

	PatientNamePanel patientNamePanel;

	HeaderPanel headerPanelWide = new HeaderPanel(Util.HEADER_MODE_WIDE);
	HeaderPanel headerPanelNarrow = new HeaderPanel(Util.HEADER_MODE_NARROW);

	RiskCalculator calculator;

	private String erefID;

	String patientNHI;

	public void setPatientNamePanel(PatientNamePanel patientNamePanel) {
		this.patientNamePanel = patientNamePanel;
	}

	public PatientNamePanel getPatientNamePanel() {
		return patientNamePanel;
	}

	Logger logger = Logger.getLogger("Form1");

	@Override
	public void onModuleLoad() {

		Logger logger = Logger.getLogger("Form1");

		logger.log(Level.FINEST, "Starting the application");

		submitButton.ensureDebugId(Util.ID_BUTTON_SUBMIT);

		// check that we want to update the db. The default is to have it on,
		// and you must explicitly turn it off. this is for testing only.

		String dbOn = Window.Location.getParameter("db");

		if (dbOn != null && dbOn.equals("false")) {

			this.databaseOn = false;

		} else {

			this.databaseOn = true;
		}

		// check that you must preload data

		if (this.databaseOn) {

			String preloadOnString = Window.Location.getParameter("preload");

			if (preloadOnString != null && ( preloadOnString.equals("false") || preloadOnString.equals("FALSE") ) ) {

				this.preloadOn = false;

			} else {

				this.preloadOn = true;
			}

		} else {

			this.preloadOn = false;
		}

		/*
	     * 
	     */

		patientNamePanel = new PatientNamePanel(this);

		patientNHI = patientNamePanel.getPatientNHI();

		erefID = patientNamePanel.getErefID();

		for (int i = 0; i < Util.NUMBER_OF_RELATIONSHIPS; i++) {

			details[i] = new DetailsPanel(this, i, patientNHI, erefID);

		}

		// preload data from the database

		if (preloadOn) {

			preload(erefID, details);

		}

		hor = new HorizontalPanel();

		hor.setStylePrimaryName("mainHorizontalPanel");

		// RootPanel.get("header").add(new Image("images/header.png"));
		RootPanel.get("header").add(this.headerPanelWide);
		
		RootPanel.get("mainPanel").add(hor);
		
		RootPanel.get("footer").add(new Image("images/footer.png"));

		entryPanel = new EntryPanel(details);
		
		familyPanel = new FamilyPanel(this);

		VerticalPanel vertPanel = new VerticalPanel();
		
		vertPanel.add(familyPanel);
		
		vertPanel.add(submitButton);
		
		submitButton.setStylePrimaryName("calcRiskButtonDetailsStyle");

		// this is only to get the data across to the e-referral system
		// resultsTextArea.setVisible(false);

		// set the ID, for integration with the ereferral system.
		// resultsTextArea.ensureDebugId("risk_description");
		// vertPanel.add(resultsTextArea);

		// resultsTextArea.setVisible(false);
		submitButton.addClickHandler(this);
		
		submitButton.setEnabled(true);

		hor.add(vertPanel);
		
		hor.add(entryPanel);

	}

	private void preload(String erefID2, DetailsPanel[] details2) {

		GetHistoryServiceAsync getHistoryService = (GetHistoryServiceAsync) GWT
				.create(GetHistoryService.class);

		AsyncCallback<CancerHistory[]> callback = new AsyncCallback<CancerHistory[]>() {

			/**
			 * 
			 * This is where you go if the server fails
			 * 
			 * Note that this goes asynchronously, so you don't know quite when
			 * this will happen.
			 * 
			 * 
			 */
			public void onFailure(Throwable caught) {

				// do something with errors

				 

				caught.printStackTrace();

				logger.log(Level.FINE, "Unexpected failure at the server",
						caught);

				Window.alert("Unexpected error retrieving family history. Contact Support");

			}

			/**
			 * 
			 * This is where you go if the server has completed getting history.
			 * It may have caught an exception, and we can test this in the
			 * result.
			 * 
			 * Note that this goes asynchronously, so you don't know quite when
			 * this will happen.
			 * 
			 * @param result
			 *            "ok" or "error".
			 * 
			 */
			public void onSuccess(CancerHistory[] result) {

				logger.log(Level.FINE, "success at the server: " + result);

				if (null != result) {

					for (int countWindows = 0; countWindows < Util.NUMBER_OF_RELATIONSHIPS; countWindows++) {

						int lineCounter = 0;

						for (int i = 0; i < result.length; i++) {

							if (details[countWindows].getRelationshipType() == result[i]
									.getRelationshipType()) {

								details[countWindows].addLine(lineCounter,
										result[i].getName(),
										result[i].isColonCancer(),
										result[i].getCcAgeString(),
										result[i].isMultPols(),
										result[i].isOtherCancer(),
										result[i].getoAgeString(),
										result[i].isDeceased(),
										result[i].getdAgeString(),
										result[i].getComment());

								lineCounter++;

							}

						}

					}

				} else {

				}
				
				// redo the coloured circle around the patient
				
				updateRiskAssessment(); 
			}
		};

		/*
		 * Make the call to the server.
		 */
		getHistoryService.getHistory(erefID, callback);

	}

	void setWhoIsClicked(int who) {
		entryPanel.setWhoIsClicked(who);
	}

	void setCancerSign(int who) {
		logger.log(Level.FINEST, "setDone " + who);
		familyPanel.setCancerSign(who);
	}

	void removeCancerSign(int who) {
		logger.log(Level.FINEST, "removeCancerSign " + who);
		familyPanel.removeCancerSign(who);
	}

	void setCross(int who) {
		logger.log(Level.FINEST, "setCross " + who);
		familyPanel.setCross(who);
	}

	void removeCross(int who) {
		logger.log(Level.FINEST, "removeCross " + who);
		familyPanel.removeCross(who);
	}

	public void updateRiskAssessment() {
		short category = calculateRisk();
		// change the colour of the circle around the patient
		familyPanel.setRiskAssessment(category);

	}

	public void clearEntryPanel() {
		entryPanel.clearPanel();
	}

	void enableSubmitButton() {
		submitButton.setEnabled(true);
	}

	void disableSubmitButton() {
		submitButton.setEnabled(false);
	}

	/**
	 * to be implemented. This just goes to the next category every time.
	 * 
	 * @return
	 */
	private short calculateRisk() {

		calculator = new RiskCalculator(details);

		short result = calculator.calculateRisk();

		return result;

	}

	@Override
	public void onClick(ClickEvent event) {

		logger.log(Level.FINEST, "clicked submit button");

		// calculate the risk level
		short riskLevel = calculateRisk();

		callAPI(riskLevel, erefID);

		// update the database
		if (this.databaseOn) {

			sendToDB(riskLevel, erefID);

		} else {

			logger.log(Level.WARNING, "database update has been switched off");
		}

		// create the panel with the risk outcome

		RiskPanel riskPanel = new RiskPanel(this, riskLevel,
				this.patientNamePanel.getPatientName(),
				this.patientNamePanel.getPatientDOB(),
				this.patientNamePanel.getPatientNHI(), calculator
						.getCancerHistoryManager().getHistories());

		// clear the current panel
		RootPanel.get("header").clear();
		RootPanel.get("mainPanel").clear();
		RootPanel.get("footer").clear();

		// make the panel with the risk outcome.
		RootPanel.get("header").add(this.headerPanelNarrow);
		RootPanel.get("mainPanel").add(riskPanel);
		RootPanel.get("footer").add(new Image("images/footer-narrow.png"));

	}

	void callAPI(short riskLevel, String erefID) {

		String xml = calculator.getCancerHistoryManager().toXML();

		// Splice in the erefid and the risk level

		xml = xml.replace("<HISTORY>", "<HISTORY><EREFID>" + erefID
				+ "</EREFID><RISKLEVEL>" + riskLevel + "</RISKLEVEL>");

		alert(xml);

	}

	public static native void alert(String msg) /*-{
												
												$wnd.myFunction(msg);
												
												}-*/;

	void setBackToFamilyPanel() {
		RootPanel.get("header").clear();
		RootPanel.get("mainPanel").clear();
		RootPanel.get("footer").clear();

		RootPanel.get("header").add(this.headerPanelWide);
		RootPanel.get("mainPanel").add(hor);
		RootPanel.get("footer").add(new Image("images/footer.png"));

	}
	
	void closeApplication() {
		
		closeWindow();
		
	}
	
	public static native void closeWindow() /*-{ $wnd.closeWindow();}-*/;

	
	private void sendToDB(short riskLevel, String erefID) {
		// TODO Auto-generated method stub

		UpdateServiceAsync updateService = (UpdateServiceAsync) GWT
				.create(UpdateService.class);
		// ServiceDefTarget endpoint = (ServiceDefTarget) updateService;

		AsyncCallback<String> callback = new AsyncCallback<String>() {

			/**
			 * 
			 * This is where you go if the server fails
			 * 
			 * Note that this goes asynchronously, so you don't know quite when
			 * this will happen.
			 * 
			 * 
			 */
			public void onFailure(Throwable caught) {
				// do something with errors
				System.out.println("Unexpected failure at the server");
				logger.log(Level.FINE, "Unexpected failure at the server");

				Window.alert("Unexpected error updating updating family history.Contact Support");

			}

			/**
			 * 
			 * This is where you go if the server has completed the updates. It
			 * may have caught an exception, and we can test this in the result.
			 * 
			 * Note that this goes asynchronously, so you don't know quite when
			 * this will happen.
			 * 
			 * @param result
			 *            "ok" or "error".
			 * 
			 */
			public void onSuccess(String result) {

				logger.log(Level.FINE, "success at the server: " + result);

				if (null != result && result.equals("ok")) {
					// do nothing, all is well
				} else {

					// not good. An unexpected server side error.

					Window.alert("Unexpected error processing family history. Contact support.");

				}
			}
		};

		/*
		 * Make the call to the server.
		 */
		updateService.updateServer(calculator.getCancerHistoryManager()
				.getHistories(), riskLevel, erefID, callback);

	}

	/**
	 * 
	 * Enable clicks again. They should be disabled when the user opens a
	 * details panel, until he has clicked OK there. So you cannot open up say,
	 * the details for Pa, and then click into the tree, with Pa open, and click
	 * on Ma and start entering there. If you could, you might bypass
	 * validation, triggered by the OK button on the details panel.
	 * 
	 */
	public void enableClicksOnFamilyPanel() {

		familyPanel.enableClicks();

	}

	/**
	 * make all panels visible or invisible
	 * 
	 * @param visible
	 * 
	 */
	void setVisible(boolean visible) {

		RootPanel.get("header").setVisible(visible);

		RootPanel.get("mainPanel").setVisible(visible);

		RootPanel.get("footer").setVisible(visible);

	}

}
