/*

Disclaimer of Warranties. The author disclaims to the fullest extent authorized by law any and all other warranties, 
whether express or implied, including, without limitation, any implied warranties of title, non-infringement, quiet enjoyment, 
integration, merchantability or fitness for a particular purpose. Without limitation of the foregoing, the author expressly 
does not warrant that:
(a) the software will meet your requirements or expectations;
(b) the software or the software content] will be free of bugs, errors, viruses or other defects;
(c) any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
(d) the software will be compatible with third party software;
(e) any errors in the software will be corrected.

Under no circumstances shall the author be liable to any user for direct, indirect, incidental, consequential, 
special, or exemplary damages, arising from the software, or user's use or misuse of the software or any other services 
provided by the author. 

Such limitation of liability shall apply whether the damages arise from the use or
misuse of the software or any other services supplied by the author
(including such damages incurred by third parties), or errors of the software.

The software is supplied “as is” and all use is at your own risk.



Author: Michel de Lange

Dunedin, January 2014.

*/

package ac.otago.infoscience.eCRCpublic.client;

 
import java.util.logging.Level;
import java.util.logging.Logger;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.dom.client.Document;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.VerticalPanel;

public class Form1 implements EntryPoint, ClickHandler {

	
	 
	// the panel where the user agrees to the disclaimer.
	DisclaimerPanel disclaimerPanel;
	
	EntryPanel entryPanel;
	// create all the detail panels

	FamilyPanel familyPanel;

	Button submitButton = new Button("calculate risk");
	
	HorizontalPanel hor = new HorizontalPanel();

	DetailsPanel[] details = new DetailsPanel[Util.NUMBER_OF_RELATIONSHIPS];
	
	PatientNamePanel patientNamePanel;
	
	HelpPanel helpPanel = new HelpPanel(this);
	
	HeaderPanel headerPanelWide = new HeaderPanel(Util.HEADER_MODE_WIDE);
	HeaderPanel headerPanelNarrow = new HeaderPanel(Util.HEADER_MODE_NARROW);
	
	RiskCalculator calculator;

	private String erefID;
	String patientNHI;

	public void setPatientNamePanel(PatientNamePanel patientNamePanel) {
		this.patientNamePanel = patientNamePanel;
	}

	public PatientNamePanel getPatientNamePanel() {
		return patientNamePanel;
	}

	Logger logger = Logger.getLogger("Form1");

	@Override
	public void onModuleLoad() {

		Logger logger = Logger.getLogger("Form1");
		logger.log(Level.FINEST, "Starting the application");
		
	 	String referrer = Document.get().getReferrer();
	 	logger.log(Level.FINEST, "referrer: " + referrer);
		
	 	disclaimerPanel = new DisclaimerPanel(this);
		
		submitButton.ensureDebugId(Util.ID_BUTTON_SUBMIT
				);

		 

		patientNamePanel = new PatientNamePanel(this);
		 
		for (int i = 0; i < Util.NUMBER_OF_RELATIONSHIPS; i++) {
			details[i] = new DetailsPanel(this, i, patientNHI, erefID);

		}

		hor = new HorizontalPanel();
		hor.setStylePrimaryName("mainHorizontalPanel");

		RootPanel.get("header").add(this.headerPanelWide);
		RootPanel.get("mainPanel").add(disclaimerPanel);
		
		RootPanel.get("footer").add(new Image("images/footer.png"));

		entryPanel = new EntryPanel(details);
		familyPanel = new FamilyPanel(this);

		VerticalPanel vertPanel = new VerticalPanel();
		vertPanel.add(familyPanel);
		vertPanel.add(submitButton);
		submitButton.setStylePrimaryName("calcRiskButtonDetailsStyle");

		// this is only to get the data across to the e-referral system
		// resultsTextArea.setVisible(false);

		// set the ID, for integration with the ereferral system.
		// resultsTextArea.ensureDebugId("risk_description");
		// vertPanel.add(resultsTextArea);

		// resultsTextArea.setVisible(false);
		submitButton.addClickHandler(this);
		submitButton.setEnabled(true);

		hor.add(vertPanel);
		hor.add(entryPanel);

	}

	void setWhoIsClicked(int who) {
		entryPanel.setWhoIsClicked(who);
	}

	void setCancerSign(int who) {
		logger.log(Level.FINEST, "setDone " + who);
		familyPanel.setCancerSign(who);
	}

	void removeCancerSign(int who) {
		logger.log(Level.FINEST, "removeCancerSign " + who);
		familyPanel.removeCancerSign(who);
	}

	 

	public void updateRiskAssessment() {
		short category = calculateRisk();
		// change the colour of the circle around the patient
		familyPanel.setRiskAssessment(category);

	}

	public void clearEntryPanel() {
		entryPanel.clearPanel();
	}

	void enableSubmitButton() {
		submitButton.setEnabled(true);
	}

	void disableSubmitButton() {
		submitButton.setEnabled(false);
	}

	/**
	 * to be implemented. This just goes to the next category every time.
	 * 
	 * @return
	 */
	private short calculateRisk() {

		calculator = new RiskCalculator(details);

		short result = calculator.calculateRisk();

		return result;

	}

	@Override
	public void onClick(ClickEvent event) {
	
		logger.log(Level.FINEST, "clicked submit button");
		
		// calculate the risk level
		short riskLevel = calculateRisk();
		
	 
		
		
		// create the panel with the risk outcome
		
		RiskPanel riskPanel = new RiskPanel(this, riskLevel,
				 calculator
						.getCancerHistoryManager().getHistories());

		// clear the current panel
		RootPanel.get("header").clear();
		RootPanel.get("mainPanel").clear();
		RootPanel.get("footer").clear();

		// make the panel with the risk outcome.
		RootPanel.get("header").add(this.headerPanelNarrow);
		RootPanel.get("mainPanel").add(riskPanel);
		RootPanel.get("footer").add(new Image("images/footer-narrow.png"));

	
	}

	
	void setBackToFamilyPanel() {
		RootPanel.get("header").clear();
		RootPanel.get("mainPanel").clear();
		RootPanel.get("footer").clear();

		RootPanel.get("header").add(this.headerPanelWide);
		RootPanel.get("mainPanel").add(hor);
		RootPanel.get("footer").add(new Image("images/footer.png"));

	}

	/**
	 * 
	 * Enable clicks again. They should be disabled when the user opens a
	 * details panel, until he has clicked OK there. So you cannot open up say,
	 * the details for Pa, and then click into the tree, with Pa open, and click
	 * on Ma and start entering there. If you could, you might bypass
	 * validation, triggered by the OK button on the details panel.
	 * 
	 */
	public void enableClicksOnFamilyPanel() {
		familyPanel.enableClicks();

	}

	/**
	 * make all panels visible or invisible
	 * 
	 * @param visible 
	 * 
	 */
	void setVisible(boolean visible) {
		RootPanel.get("header").setVisible(visible);
		RootPanel.get("mainPanel").setVisible(visible);
		RootPanel.get("footer").setVisible(visible);
	}

	public void setAgreed() {
		
		RootPanel.get("mainPanel").remove(disclaimerPanel);
		RootPanel.get("mainPanel").add(hor);
		
	}
	
	public void toHelp() {
		RootPanel.get("mainPanel").remove(hor);
		RootPanel.get("mainPanel").add(helpPanel);
		
	}

	public void toTree() {
		RootPanel.get("mainPanel").remove(helpPanel);
		RootPanel.get("mainPanel").add(hor);
		
	}
}
