/*

Disclaimer of Warranties. The author disclaims to the fullest extent authorized by law any and all other warranties, 
whether express or implied, including, without limitation, any implied warranties of title, non-infringement, quiet enjoyment, 
integration, merchantability or fitness for a particular purpose. Without limitation of the foregoing, the author expressly 
does not warrant that:
(a) the software will meet your requirements or expectations;
(b) the software or the software content] will be free of bugs, errors, viruses or other defects;
(c) any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
(d) the software will be compatible with third party software;
(e) any errors in the software will be corrected.

Under no circumstances shall the author be liable to any user for direct, indirect, incidental, consequential, 
special, or exemplary damages, arising from the software, or user's use or misuse of the software or any other services 
provided by the author. 

Such limitation of liability shall apply whether the damages arise from the use or
misuse of the software or any other services supplied by the author
(including such damages incurred by third parties), or errors of the software.

The software is supplied “as is” and all use is at your own risk.



Author: Michel de Lange

Dunedin, January 2014.

*/

package ac.otago.infoscience.eCRCpublic.client;

import java.util.logging.Level;
import java.util.logging.Logger;

import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.user.client.ui.Image;

/**
 * This Panel, shows an image, with the current calculation of the risk. It shows as the 
 * green, yellow, orange or red circle around the patient stick figure.
 * 
 * 
 * @author michel
 *
 */
public class RiskImage extends AbsolutePanel  {

	//
	int riskCategory;
	
	// the coloured circle image
	Image theImage;
	
	Logger logger = Logger.getLogger("RiskImage");
	
	int sizeX;
	public Image getTheImage() {
		return theImage;
	}

	public void setTheImage(Image theImage) {
		this.theImage = theImage;
	}

	public int getSizeX() {
		return sizeX;
	}

	public int getSizeY() {
		return sizeY;
	}



	int sizeY;
	
	
	RiskImage() {
		
	}
	
	/**
	 *
	 * @param category The risk category
	 */
	RiskImage(int category) {
		this.riskCategory = category;
		if (category == Util.CATEGORY_0 ) {
			theImage = new Image("images/greencircle.png");
		}
		if (category == Util.CATEGORY_1 ) {
			theImage = new Image("images/yellowcircle.png");
		}
		
		if (category == Util.CATEGORY_2) {
			theImage = new Image("images/orangecircle.png");
		}
		if (category == Util.CATEGORY_3) {
			theImage = new Image("images/redcircle.png");
		}
		add(theImage);
		theImage.setVisible(false);
		this.sizeX = Util.CIRLCE_SIZE_X; //does not work in Chrome!? theImage.getWidth();
		this.sizeY = Util.CIRLCE_SIZE_Y; //does not work in Chrome!? theImage.getHeight();
		logger.log(Level.FINE,"Setting sizeX, sizeY for type:" + this.riskCategory+ ":" + this.sizeX + " " + this.sizeY);
	}
	
	int getRiskCategory() {
		return this.riskCategory;
	}
	
	
	/**
	 * Set this image visible, if it is of the given type.
	 * 
	 * @param type: risk category
	 * @param visible
	 */
	void setVisible(int type, boolean visible) {
		
		if (this.riskCategory == type) {
			theImage.setVisible(visible);
		} else {
			theImage.setVisible(!visible);
		}
	}
}
