/*

Disclaimer of Warranties. The author disclaims to the fullest extent authorized by law any and all other warranties, 
whether express or implied, including, without limitation, any implied warranties of title, non-infringement, quiet enjoyment, 
integration, merchantability or fitness for a particular purpose. Without limitation of the foregoing, the author expressly 
does not warrant that:
(a) the software will meet your requirements or expectations;
(b) the software or the software content] will be free of bugs, errors, viruses or other defects;
(c) any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
(d) the software will be compatible with third party software;
(e) any errors in the software will be corrected.

Under no circumstances shall the author be liable to any user for direct, indirect, incidental, consequential, 
special, or exemplary damages, arising from the software, or user's use or misuse of the software or any other services 
provided by the author. 

Such limitation of liability shall apply whether the damages arise from the use or
misuse of the software or any other services supplied by the author
(including such damages incurred by third parties), or errors of the software.

The software is supplied “as is” and all use is at your own risk.



Author: Michel de Lange

Dunedin, January 2014.

*/
package ac.otago.infoscience.eCRCpublic.client;

import java.util.logging.Level;
import java.util.logging.Logger;

import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.ui.AbsolutePanel;
import com.google.gwt.user.client.ui.Image;

public class FamilyPanel extends AbsolutePanel implements ClickHandler {

	Image familyImage = new Image("images/family-p.png");

	// the overlaying images, which show that you have done a relationship. This
	// should show up if there is something for this relationship, which affects
	// the risk outcome. So if you have typed in that granny had bowel cancer,
	// then
	// granny should show this overlay image.

	
	DoneIcon[] doneIcons = new DoneIcon[Util.NUMBER_OF_RELATIONSHIPS];
	RiskImage[] riskImages = new RiskImage[Util.NUMBER_OF_CATEGORIES];
 	OverlayImage[] overlayImages = new OverlayImage[Util.NUMBER_OF_RELATIONSHIPS];

 	QuestionMarkOverlay questionMarkOverlay;
	
	HandlerRegistration familyImageClickHandler;

	Logger logger = Logger.getLogger("FamilyPanel");
	Form1 parent;
	ImageSections sections;

	FamilyPanel() {
	}

	FamilyPanel(Form1 theForm) {
		this.parent = theForm;
		this.add(familyImage, -1, -1);
		sections = new ImageSections();
		familyImageClickHandler = familyImage.addClickHandler(this);

		// add the cancer signs
		for (int type = 0; type < doneIcons.length; type++) {
			doneIcons[type] = new DoneIcon(type, this);
			// set invisible
			doneIcons[type].setVisible(type, false);
			int x = sections.whereToPutCancerImageX(type,
					doneIcons[type].getSizeX());
			int y = sections.whereToPutCancerImageY(type,
					doneIcons[type].getSizeY());
			this.add(doneIcons[type], x, y);

		}

		// add the questionmark image
		questionMarkOverlay = new QuestionMarkOverlay(parent);
		this.add(questionMarkOverlay, Util.getQuestionX(), Util.getQuestionY());

		 
		// add the overlay, for use with Selenium.

		for (int type = 0; type < overlayImages.length; type++) {
			
			 
			overlayImages[type] = new OverlayImage(type,this);
			
			// set invisible
			//overlayImages[type].setVisible(type, true);
			int x = sections.whereToPutOverlayImageX(type);
			int y = sections.whereToPutOverlayImageY(type);
			this.add(overlayImages[type], x, y);
			logger.log(Level.FINE,"added overlay image " + type + " " + x + "," + y );
			
		}

		// add the green, orange and red circle for the risk category
		for (int category = 0; category < riskImages.length; category++) {
			riskImages[category] = new RiskImage(category);
			// set invisible
			riskImages[category].setVisible(category, false);
			int x = sections.whereToPutRiskCircleX(riskImages[category]
					.getSizeX());
			int y = sections.whereToPutRiskCircleY(riskImages[category]
					.getSizeY());
			logger.log(Level.FINE, "Putting the risk circle at: " + x + "," + y);
			this.add(riskImages[category], x, y);

		}

		// start with the lowest risk category
		setRiskAssessment(Util.CATEGORY_0);

		// add the patient name, etc from the request parameters.

		this.add(parent.getPatientNamePanel(), sections.whereToPutNamePanelX(),
				sections.whereToPutNamePanelY());

	}

	public void passOnClick(ClickEvent event, int type ) {
		// Object sender = event.getSource();
		// logger.log(Level.FINEST, "click event");
		
		// don't use x,y now, because they are relative to the overlay. Anyway, we know type.
		logger.log(Level.FINE, "ClickEvent, from overlay: type is: " + type);
		int whoWasClicked = type;
		// details.setVisible(true);
		parent.setWhoIsClicked(whoWasClicked);
		// > 0, because you should not enter cancer history for the patient
		if (whoWasClicked > 0) {
			parent.disableSubmitButton();
			this.disableClicks();
		}

	}
	
	public void doClick(ClickEvent event) {
		// Object sender = event.getSource();
				// logger.log(Level.FINEST, "click event");
				int x = event.getX();
				int y = event.getY();
				logger.log(Level.FINE, "ClickEvent: x,y is: " + x + "," + y);
				int whoWasClicked = workOutWho(x, y);
				// details.setVisible(true);
				parent.setWhoIsClicked(whoWasClicked);
				// > 0, because you should not enter cancer history for the patient
				if (whoWasClicked > 0) {
					parent.disableSubmitButton();
					this.disableClicks();
				}
				// if (sender == checkBox) {
				// When the check box is clicked, update the text box's enabled state.
				// textBox.setEnabled(checkBox.isChecked());

	}
	
	public void onClick(ClickEvent event) {
		doClick(event);
	}

	void cancerSignClicked(int who) {
		parent.setWhoIsClicked(who);
		if (who > -1) {
			parent.disableSubmitButton();
		}
	}

	int workOutWho(int x, int y) {
		int who = sections.whoWasIt(x, y);
		// logger.log(Level.FINEST,"clicked was " + who );
		logger.log(Level.FINEST, "clicked was " + Util.getDescription(who));

		return who;
	}

	public void setCancerSign(int who) {
		// TODO Auto-generated method stub
		logger.log(Level.FINEST,
				"setCancerSign " + who + " " + Util.getDescription(who));
		doneIcons[who].setVisible(who, true);
	}

	public void removeCancerSign(int who) {
		// TODO Auto-generated method stub
		logger.log(Level.FINEST,
				"removeCancerSign " + who + " " + Util.getDescription(who));
		doneIcons[who].setVisible(who, false);
	}

	 

	public void setRiskAssessment(int category) {

		for (int cat = 0; cat < Util.NUMBER_OF_CATEGORIES; cat++) {
			removeRiskAssessment(cat);
		}

		// now make the correct one visible
		logger.log(
				Level.FINEST,
				"setRiskAssessment " + category + " "
						+ Util.getRiskGescription(category));
		riskImages[category].setVisible(category, true);

	}

	public void removeRiskAssessment(int category) {
		// TODO Auto-generated method stub
		logger.log(Level.FINEST, "removeRiskAssessment " + category + " "
				+ Util.getRiskGescription(category));
		riskImages[category].setVisible(category, false);

	}

	/**
	 * remove the clickhandler, so that the user needs to press OK on the
	 * details panel first, before opening up another details panel for another
	 * relative.
	 */
	public void disableClicks() {
		familyImageClickHandler.removeHandler();
	}

	public void enableClicks() {
		this.familyImageClickHandler = familyImage.addClickHandler(this);
	}

}
