/*

Disclaimer of Warranties. The author disclaims to the fullest extent authorized by law any and all other warranties, 
whether express or implied, including, without limitation, any implied warranties of title, non-infringement, quiet enjoyment, 
integration, merchantability or fitness for a particular purpose. Without limitation of the foregoing, the author expressly 
does not warrant that:
(a) the software will meet your requirements or expectations;
(b) the software or the software content] will be free of bugs, errors, viruses or other defects;
(c) any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
(d) the software will be compatible with third party software;
(e) any errors in the software will be corrected.

Under no circumstances shall the author be liable to any user for direct, indirect, incidental, consequential, 
special, or exemplary damages, arising from the software, or user's use or misuse of the software or any other services 
provided by the author. 

Such limitation of liability shall apply whether the damages arise from the use or
misuse of the software or any other services supplied by the author
(including such damages incurred by third parties), or errors of the software.

The software is supplied “as is” and all use is at your own risk.



Author: Michel de Lange

Dunedin, January 2014.

*/

package ac.otago.infoscience.eCRCpublic.client;

import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.SimpleCheckBox;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
	

	public class SummaryPanel extends VerticalPanel {

		 Grid grid;

		public Grid getGrid() {
			return grid;
		}

		public SummaryPanel() {
		}

		/**
		 * @wbp.parser.constructor
		 */
		public SummaryPanel(  CancerHistory[] histories) {

			super();
		
			
				Label headerLabel = new Label("");

				add(headerLabel);
				
				int instances = histories.length;

				grid = new Grid(instances + 1, 7);
				add(grid);

				/*
				 * Mind that if you change the layout of these fields, you must also
				 * change the count functions further down. You must also change
				 * CancerHistoryManager.toHistories()
				 */
				grid.setStylePrimaryName("gridStyle1");
				grid.setSize("800px", "146px");
				grid.setWidget(0, Util.COL_NAME, new Label("Name"));
				grid.setWidget(0, Util.COL_CC_CHECKBOX, new Label("Colon Cancer"));
				grid.setWidget(0, Util.COL_CC_AGE, new Label("Age at diagnosis"));
				grid.setWidget(0, Util.COL_MULT_POL,
						new Label("Multiple \n polyps"));
				grid.setWidget(0, Util.COL_OT_CHECKBOX, new Label("HNPCC"));
				grid.setWidget(0, Util.COL_OT_AGE, new Label("Age at diagnosis"));
		 		grid.setWidget(0,Util.COL_RELATIONSHIP_TYPE ,new Label("Relation"));

				grid.setBorderWidth(2);

				// we have done the header, now the data. Note that the grid uses index 0 for the header, 
				//   but histories[] starts with 0, so we always get the data from [i-1]
				for (int i = 1; i <= instances; i++) {

					TextBox nameTextBox = new TextBox();
					nameTextBox.setEnabled(false);
					nameTextBox.setValue(histories[i-1].getName());
					grid.setWidget(i, Util.COL_NAME, nameTextBox);
					nameTextBox.setTitle(Util.TOOLTIP_NAME);
					nameTextBox.setWidth("73px");
					
					final SimpleCheckBox ccCheckBox = new SimpleCheckBox();
					ccCheckBox.setEnabled(false);
					ccCheckBox.setValue(histories[i-1].isColonCancer());
					grid.setWidget(i, Util.COL_CC_CHECKBOX, ccCheckBox);
					ccCheckBox.setTitle(Util.TOOLTIP_CC);

					final TextBox ageCCTextBox = new TextBox();
					ageCCTextBox.setEnabled(false);
					
					ageCCTextBox.setValue( histories[i-1].getCcAgeString() );
					
					ageCCTextBox.setTitle(Util.TOOLTIP_CC_AGE);
					
					grid.setWidget(i, Util.COL_CC_AGE, ageCCTextBox);
					ageCCTextBox.setWidth("54px");
					ageCCTextBox.setEnabled(false); 

					final SimpleCheckBox polypsCheckBox = new SimpleCheckBox();
					polypsCheckBox.setEnabled(false);
					polypsCheckBox.setValue(histories[i-1].isMultPols());
					grid.setWidget(i, Util.COL_MULT_POL, polypsCheckBox);
					polypsCheckBox.setEnabled(false);
					polypsCheckBox.setTitle(Util.TOOLTIP_MULT);

					final SimpleCheckBox otherCancerCheckBox = new SimpleCheckBox();
					otherCancerCheckBox.setEnabled(false);
					otherCancerCheckBox.setValue(histories[i-1].isOtherCancer());
					grid.setWidget(i, Util.COL_OT_CHECKBOX, otherCancerCheckBox);
					otherCancerCheckBox.setTitle(Util.TOOLTIP_OT);

					final TextBox otherCancerAgeTextBox = new TextBox();
					otherCancerAgeTextBox.setEnabled(false);
					otherCancerAgeTextBox.setValue(histories[i-1].getoAgeString());
					otherCancerAgeTextBox.setTitle(Util.TOOLTIP_OT_AGE);
					

					grid.setWidget(i, Util.COL_OT_AGE, otherCancerAgeTextBox);
					otherCancerAgeTextBox.setWidth("36px");
					otherCancerAgeTextBox.setEnabled(false);

			 		 
				 			
					final TextBox  relTextBox = new TextBox();
					// get the alt description, so that we say 'Child' rather than 'Children'. It is now
					//   in the grid, not as the header.
					relTextBox.setValue(Util.getAltGescription(  histories[i-1].getRelationshipType()));
					grid.setWidget(i, Util.COL_RELATIONSHIP_TYPE, relTextBox);
					relTextBox.setTitle(Util.TOOLTIP_REL);
					
					
				}

		
		}		
		
		
	}
	
